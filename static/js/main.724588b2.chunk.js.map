{"version":3,"sources":["serviceWorker.js","components/bar.jsx","components/infocard.jsx","components/cardgroup.jsx","components/profile.jsx","components/slideshow.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Bar","AppBar","position","Toolbar","Typography","variant","Button","color","href","React","Component","InfoCard","className","Card","style","width","Img","src","Body","Title","this","props","title","Text","text","Cardgroup","Profile","user","avatar","repos","Slideshow","Carousel","Item","App","useState","name","setName","setUsername","setFollowers","setFollowing","setRepos","setAvatar","useEffect","fetch","then","res","json","data","console","log","setData","login","followers","following","public_repos","avatar_url","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.724588b2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\n\nclass Bar extends React.Component {\n  render () {\n    return (\n        <AppBar position=\"static\">\n  <Toolbar>\n  <Typography variant=\"h6\" >\n            Robert Ludwick\n          </Typography>\n          <Button color=\"inherit\" href=\"https://drive.google.com/uc?export=download&id=1SZKGe93ndXtP52V0cufovE6sEC2lkP1J\">Resume</Button>\n          <Button color=\"inherit\">Projects</Button>\n          \n          <Button color=\"inherit\" href=\"https://github.com/RobertLudwick\">Github</Button>\n          <Button color=\"inherit\" href=\"https://www.linkedin.com/in/robert-ludwick-473437151/\">Likedin</Button>\n  </Toolbar>\n</AppBar>\n    )\n  }\n}\n\nexport default Bar;\n\n","import React from 'react'\nimport Card from 'react-bootstrap/Card' \n\nclass InfoCard extends React.Component {\n  render () {\n    \n    return (\n        <div className=\"distance\">\n          <Card style={{ width: '18rem' }}>\n        <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n        <Card.Body>\n          <Card.Title>{this.props.title}</Card.Title>\n          <Card.Text>\n            {this.props.text}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n        </div>\n        \n    )\n  }\n}\n\nexport default InfoCard;","import React from 'react'\nimport InfoCard from './infocard'\n\nclass Cardgroup extends React.Component {\n  render () {\n    return (\n        <div  className=\"line\">\n            <InfoCard title= \"Front end\" text= \"HTML5 CSS3 JavaScript React\"/>\n            <InfoCard title= \"Server\" text= \"NodeJS Flask Django\"/>\n            <InfoCard title= \"Database\" text= \"PostgresSQL mySQL MongoDB\" />\n        </div>\n        \n    )\n  }\n}\n\nexport default Cardgroup;","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card' \n\nimport './Styles/component.css'\nimport './Styles/profile.css'\n\nclass Profile extends React.Component {\n \n  render () {\n    return (\n      <Card className=\"standard\">\n        <Card.Body>\n          <Card.Title>{this.props.user}</Card.Title>\n          <Card.Img variant=\"left\" className=\"profile\" src={this.props.avatar} />\n          <Card.Text className=\"profile\">\n            {this.props.repos}\n          </Card.Text>\n          <Button href=\"https://github.com/RobertLudwick?tab=repositories\">Repositories</Button>\n        </Card.Body>\n      </Card>\n    )\n  }\n}\n\nexport default Profile;","import React  from 'react'\nimport Carousel from 'react-bootstrap/Carousel'\nimport Profile from './profile'\nimport './Styles/component.css'\n\nclass Slideshow extends React.Component {\n  \n  \n  render () {\n    return (\n      <Carousel className=\"standard\">\n        <Carousel.Item>\n          <Profile user = {this.props.user} repos = {this.props.repos} avatar = {this.props.avatar} />\n        </Carousel.Item>\n        <Carousel.Item>\n          Test\n        </Carousel.Item>\n      </Carousel>\n    )\n  }\n}\n\nexport default Slideshow;","import React, { useEffect, useState } from 'react';\nimport './App.css';\n//import ReactDOM from 'react-dom';\nimport './index.css';\n//import * as serviceWorker from './serviceWorker';\n//import Navi from './components/navi'\nimport Bar from './components/bar'\n//import Header from './components/header'\nimport Cardgroup from './components/cardgroup'\nimport Slideshow from './components/slideshow'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [userName, setUsername] = useState('');\n  const [followers, setFollowers] = useState('');\n  const [following, setFollowing] = useState('');\n  const [repos, setRepos] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    fetch('https://api.github.com/users/robertludwick')\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        setData(data)\n      })\n  }, []);\n  \n  const setData = ({ name, login, followers, following, public_repos, avatar_url}) => {\n    setName(name);\n    setUsername(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n  }\n  \n  return (\n    <React.StrictMode>\n    <Bar />\n    <Slideshow user = {name} repos = {repos} avatar = {avatar} />\n    <Cardgroup />\n  </React.StrictMode>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}